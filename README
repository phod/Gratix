About:
    This is a program that will convert mathematical descriptions of graphs
    to an adjacency matrix. Still in deisgn phase. Will probabily begin
    implementing within the next few weeks.

Features:
    Can read in a graph and it's verticies
    Can connect vertices with edges
    Can declare if a graph is weighted or not
    Can declare if a graph is directed or not
    Can give weighted graphs a default edge weight
    Can create sub and super graphs
    Can print an adjacency matrix
    Can remove edges and vertices
    Can add edges and vertices
    Can copy graph to new instance

Example:
    Let foo be weighted and directed have bar, baz and faz
    Join bar to baz with weight 45
    Join baz to bar with weight 39
    Join faz to bar with weight 17

    Let foobar be supergraph of foo have gar
    Join gar to baz with weight 0.9
    Join gar to bar with weight 0.01

    Print matrix foo

    Print matrix foobar

    Remove bar from foo //removed for foobar too.
    Add new to foo //added to foobar too

    Let goo copy foo
    Remove baz from goo //still in foo

Grammar:
    ***In progress. Grammar may be broken in future versions until this message is removed***

    Basic grammar, handles declaration, connecting edges, and printing.

    connectV = "Join" vVar "to" vVarlist [ "with weight" num];
    vVarlist = vVar [ {"," vVar} "and" vVar ];
    declareG = "Let" gVar gTypes "have" vVarList;
    gTypes = "be" gTypeList | epsilon;
    gTypeList = gType [ {"," gType} "and" gType ];
    print = "Print" printType gVar